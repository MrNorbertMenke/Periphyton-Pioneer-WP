objects()
require("pacman")
pacman::p_load(tidyr, dplyr, plyr, ggplot2, gridExtra, gtools)
#set Working Directory
setwd("C:/github.c/Periphyton")
#Call the model output data
dat <- read.csv('./data/2023-09-15_Pioneer_Periphyton_dat.csv')
str(dat)
# fix(dat)  #NM  4160 rows
# write.csv(dat, './results/dat_check.csv')   #NM  for diagnostics only
#Replace 0 values with NA as per Norberts method
# dat$Habitat[dat$Habitat == 0] <- NA  #no need or reason
#Remove NA from the analysis
# dat <- dat[!is.na(dat$Habitat),]   #no need or reason
#Change Season/Scenario to factor and apply levels
dat$Season <- factor(dat$Season, levels = c("Jan-Mar", "Apr-Jun", "Jul-Sep", "Oct-Dec"))
dat$Scenario <- factor(dat$Scenario, levels = c("PD", "FE"))
########################################################################################################
#Summary statistics (loop!)
########################################################################################################
#Determine number of sites for looping
no_sites <- length(unique(dat$Site))
site_names <- unique(dat$Site)
site_names  #CHECKING
# REPLACE SITE NAMES WITH ASSESSMENT NODES
site_names <- c("125004B", "125007A", "125002C", "125005A")
site_names[1]
#Split dataframe into a list by site name (in alphabetical order)
dat_list <- split(dat, f=dat$Site)
# write.csv(dat_list, './results/dat_list.csv')   #NM  for diagnostics only
#Order site names alphabetically to match up with the dat_list above
#  site_names <- site_names[order(site_names)]
#no alphabetic sorting when using hand-arranged assessment node names
# site_names[4] <- "Whiteford"  #Unabbreviated name NM
site_names
#create an empty list to store summary statistics
tab <- list()
#Calculate summary statistics (Mean, SD, SE)
for(i in 1:no_sites){
tab[[i]] <- ddply(dat_list[[i]], c('Season', 'Scenario', 'Site'), summarise,
Mean = mean(Habitat),
SE = sd(Habitat) / sqrt((length(Habitat))),
SD = sd(Habitat)) #function to be applied to each site
}
#assigning the name of each list item to be its respective site
names(tab) <- c(site_names)
#Check the summary stats by site
tab
plots <- list()
#Generate all plots and save them in plots list (above), then plot them all in same window.
for(i in 1:no_sites){
plots[[i]] <- ggplot(tab[[i]], aes(x = Season, y = Mean, fill = Scenario))+
ylim(-1,20) +
xlab("Season") +
ylab("Habitat (m)") +
ggtitle(names(tab[i]))+
geom_bar(stat = "identity", position = "dodge", show.legend = F)+
geom_errorbar(aes(ymin = Mean-SD, ymax = Mean + SD), width=.1,position=position_dodge(.9))+
theme(plot.title = element_text(size=10))+
theme(axis.text=element_text(size=8))+
theme(axis.title=element_text(size=8))+
theme(legend.text=element_text(size=8))+
theme(legend.title=element_text(size=8))+
scale_fill_manual(values = c("#b5e3d2", "#2bb891"))   #NM inserted for new colour scheme
}
#Display plots
grid.arrange(grobs = plots, ncol = 2)
#Save as .tiff at 600dpi as per Glenn
ggsave(file = './results/Periphyton barplot.tiff',
arrangeGrob(grobs = plots, ncol=2), width=5, height=5, units="in", dpi=600)  #height=7.5
save.image("C:/github.c/Periphyton/Periphyton Pioneer barplots.RData")
